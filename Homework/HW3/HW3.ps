%!PS-Adobe-3.0
%%Title: HW3.py
%%For: flore
%%Creator: VIM - Vi IMproved 7.3 (2010 Aug 15)
%%CreationDate: Fri Mar 16 19:29:40 2018
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim73/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim73/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 1)59.5 792.4 ms
F0 sf
(""")59.5 772.4 ms
(Author   : Abraham Flores)59.5 762.4 ms
(File     : HW3.py)59.5 752.4 ms
(Language : Python 3.6)59.5 742.4 ms
(Created  : 3/14/2018)59.5 732.4 ms
(Edited   : 3/16/2018)59.5 722.4 ms
(San Digeo State University )59.5 702.4 ms
(MTH 693b : Computational Partial Differential Equations)59.5 692.4 ms
(Strikwerda 6.3.10 : Parabolic Equations)59.5 672.4 ms
(Heat Equation: )59.5 652.4 ms
(    u_t = b*u_xx)59.5 642.4 ms
(    )59.5 632.4 ms
(    x = [-1,1])59.5 622.4 ms
(    t = [0,1/2])59.5 612.4 ms
(             )59.5 602.4 ms
(             |   1  for |x| < 1/2)59.5 592.4 ms
(    u_0\(x\) = |  1/2 for |x| = 1/2)59.5 582.4 ms
(             |   0  for |x| > 1/2)59.5 572.4 ms
(             )59.5 562.4 ms
(    Exact Solution and Boundaries given by: )59.5 552.4 ms
(        )59.5 542.4 ms
(        u\(t,x\) = )59.5 532.4 ms
(1/2 +2*)59.5 522.4 ms
(SUM[\(-1\)**i*\(cos\(pi*x*\(2*i+1\)\)\)/\(pi*\(2*i+1\)\)*exp\(-t*pi**2\(2*i+1\)**2\)])59.5 512.4 ms
(\(i=0,inf\))59.5 502.4 ms
(    )59.5 492.4 ms
(    Crank-Nicolson\(6.3.4\) : )59.5 482.4 ms
(    h = 1/10, 1/20, 1/40)59.5 472.4 ms
(    )59.5 462.4 ms
(    Compare lambda = 1 and mu = 10)59.5 452.4 ms
(    )59.5 442.4 ms
(    Demonstrate by the computations that when lambda is constant, )59.5 432.4 ms
(    the error in the solution does not decrease when measured )59.5 422.4 ms
(    in the supremum norm, but it does decrease in the L2 norm.)59.5 412.4 ms
(""")59.5 392.4 ms
(import os,glob)59.5 382.4 ms
(import matplotlib.pyplot as plt)59.5 372.4 ms
(import numpy as np)59.5 362.4 ms
(import seaborn as sns)59.5 352.4 ms
(from scipy.sparse import diags)59.5 342.4 ms
(#Generators Exact Solution)59.5 322.4 ms
(def Exact\(t,x,lim\):)59.5 312.4 ms
(    value = 0)59.5 302.4 ms
(    for i in range\(lim\):)59.5 292.4 ms
(        numerator = np.cos\(np.pi*x*\(2*i+1\)\))59.5 282.4 ms
(        denominator = np.pi*\(2*i+1\))59.5 272.4 ms
(        decay = np.exp\(-t*np.pi**2*\(2*i+1\)**2\))59.5 262.4 ms
(        sign = \(-1\)**i)59.5 252.4 ms
(        value += sign*\(numerator/denominator\)*decay)59.5 242.4 ms
(    return 0.5 + 2*value)59.5 232.4 ms
(#Generates intial value function)59.5 212.4 ms
(def intial_foo\(x\):)59.5 202.4 ms
(    if abs\(x\) < 0.5:)59.5 192.4 ms
(        return 1)59.5 182.4 ms
(    if abs\(x\) == 0.5:)59.5 172.4 ms
(        return 0.5)59.5 162.4 ms
(    if abs\(x\) > 0.5:)59.5 152.4 ms
(        return 0)59.5 142.4 ms
(def plot\(x,U,bounds,time,title,fileLoc\):)59.5 122.4 ms
(    sns.set\(font_scale = 2\))59.5 112.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 102.4 ms
(    fig,ax = plt.subplots\(\))59.5 92.4 ms
(    fig.set_size_inches\(8,8\))59.5 82.4 ms
(    plt.plot\(x,U,linewidth=3.0,label="t = "+ str\(round\(time,3\)\),color="r"\))59.5 72.4 ms
(    plt.axis\(bounds\)    )59.5 62.4 ms
(    plt.xlabel\('x \(Spatial\)'\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 2)59.5 792.4 ms
F0 sf
(    plt.ylabel\('U\(t,x\)'\))59.5 772.4 ms
(    plt.title\(title\))59.5 762.4 ms
(    plt.legend\(\))59.5 742.4 ms
(    plt.savefig\(fileLoc+".png"\))59.5 732.4 ms
(    plt.close\(\))59.5 722.4 ms
(        )59.5 712.4 ms
(def makeGif\(gifName\):)59.5 702.4 ms
(    os.chdir\('Figures'\))59.5 692.4 ms
(    #Create txt file for gif command)59.5 682.4 ms
(    fileList = glob.glob\('*.png'\) #star grabs everything,)59.5 672.4 ms
(    fileList.sort\(\))59.5 662.4 ms
(    #writes txt file)59.5 652.4 ms
(    file = open\('FileList.txt', 'w'\))59.5 642.4 ms
(    for item in fileList:)59.5 632.4 ms
(        file.write\("%s\\n" % item\))59.5 622.4 ms
(    file.close\(\))59.5 612.4 ms
(    os.system\('convert -delay 10 @FileList.txt ' + gifName + '.gif'\))59.5 592.4 ms
(    os.system\('del FileList.txt'\))59.5 582.4 ms
(    os.system\('del *.png'\))59.5 572.4 ms
(    os.chdir\('..'\))59.5 562.4 ms
(    )59.5 552.4 ms
(def Crank_Nicolson\(h,Lamb\):)59.5 542.4 ms
(    b = 1)59.5 532.4 ms
(    mu = Lamb/h)59.5 522.4 ms
(    #generate array of intial values at t = 0)59.5 512.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 502.4 ms
(    #dimension of our matrix)59.5 492.4 ms
(    dim = len\(X\))59.5 482.4 ms
(    temp = [])59.5 472.4 ms
(    for dx in X: )59.5 462.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 452.4 ms
(        )59.5 442.4 ms
(    current_ = np.array\(temp\))59.5 432.4 ms
(    #Factored out -b*mu/2)59.5 422.4 ms
(    NEXT = np.array\([np.ones\(dim-1\),-2*\(1+1/\(b*mu\)\)*np.ones\(dim\),np.ones\(dim-1\)]\))59.5 412.4 ms
(    CURRENT = np.array\([-1*np.ones\(dim-1\),2*\(1-1/\(b*mu\)\)*np.ones\(dim\),-1*np.ones\(dim)59.5 402.4 ms
(-1\)]\))59.5 392.4 ms
(    )59.5 382.4 ms
(    offset = [-1,0,1]#Location of each diagonal)59.5 372.4 ms
(    LEFT = diags\(NEXT,offset\).toarray\(\)#Generate Matrix \(n+1\))59.5 362.4 ms
(    RIGHT = diags\(CURRENT,offset\).toarray\(\)#Generate Matrix \(n\) )59.5 352.4 ms
(    #Embed boundary conditions on matrix)59.5 342.4 ms
(    LEFT[0] *= 0)59.5 332.4 ms
(    LEFT[-1] *= 0)59.5 322.4 ms
(    LEFT[0][0] = 1)59.5 312.4 ms
(    LEFT[-1][-1] = 1)59.5 302.4 ms
(    RIGHT[0] *= 0)59.5 292.4 ms
(    RIGHT[-1] *= 0)59.5 282.4 ms
(    RIGHT[0][0] = 1)59.5 272.4 ms
(    RIGHT[-1][-1] = 1)59.5 262.4 ms
(    )59.5 242.4 ms
(    steps = int\(0.5/\(Lamb*h\)\) + 1)59.5 232.4 ms
(    for time in range\(1,steps\):)59.5 222.4 ms
(        #plot )59.5 212.4 ms
(        title = "6.3.10: Parabolic Equations")59.5 202.4 ms
(        str_time = '0'*\(4-len\(str\(time\)\)\)+str\(time\))59.5 192.4 ms
(        outFile = "Figures\\CN" + str_time)59.5 182.4 ms
(        bounds = [-1,1,0,1])59.5 172.4 ms
(        plot\(X,current_,bounds,time*Lamb*h,title,outFile\))59.5 162.4 ms
(        )59.5 152.4 ms
(        #implement Scheme)59.5 142.4 ms
(        next_ = \\)59.5 132.4 ms
(   np.linalg.tensorsolve\(\(-b*mu/2\)*LEFT,\(-b*mu/2\)*np.matmul\(RIGHT,current_\)\))59.5 122.4 ms
(        )59.5 112.4 ms
(        #Boundary Conditions)59.5 102.4 ms
(        next_[-1] = Exact\(time*Lamb*h,1,15\))59.5 92.4 ms
(        next_[0]  = Exact\(time*Lamb*h,-1,15\))59.5 82.4 ms
(        )59.5 72.4 ms
(        current_ = next_)59.5 62.4 ms
(        )59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 3)59.5 792.4 ms
F0 sf
(    #makeGif)59.5 772.4 ms
(    makeGif\("Crank_Nicolson_h_"+str\(h\)+"_Lambda_"+str\(Lamb\)\))59.5 762.4 ms
(    )59.5 752.4 ms
(def ExactGIF\(h,Lamb\):)59.5 742.4 ms
(    #generate array of intial values at t = 0)59.5 732.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 722.4 ms
(    )59.5 712.4 ms
(    temp = [])59.5 702.4 ms
(    for dx in X: )59.5 692.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 682.4 ms
(    #plot )59.5 672.4 ms
(    title = "6.3.10: Parabolic Equations")59.5 662.4 ms
(    str_time = '0000')59.5 652.4 ms
(    outFile = "Figures\\exact" + str_time)59.5 642.4 ms
(    bounds = [-1,1,0,1])59.5 632.4 ms
(    plot\(X,np.asarray\(temp\),bounds,0,title,outFile\))59.5 622.4 ms
(        )59.5 612.4 ms
(    steps = int\(0.5/\(Lamb*h\)\) + 1)59.5 602.4 ms
(    for time in range\(1,steps\):)59.5 592.4 ms
(        t = time*Lamb*h)59.5 582.4 ms
(        sol_t = Exact\(t,X,25\))59.5 572.4 ms
(        )59.5 562.4 ms
(        #plot )59.5 552.4 ms
(        title = "6.3.10: Parabolic Equations")59.5 542.4 ms
(        str_time = '0'*\(4-len\(str\(time\)\)\)+str\(time\))59.5 532.4 ms
(        outFile = "Figures\\exact" + str_time)59.5 522.4 ms
(        plot\(X,sol_t,bounds,t,title,outFile\))59.5 512.4 ms
(        )59.5 502.4 ms
(    #makeGif)59.5 492.4 ms
(    makeGif\("Exact_Solution_h_"+str\(h\)+"_Lambda_"+str\(Lamb\)\))59.5 482.4 ms
(    )59.5 472.4 ms
(def ErrorGIF\(h,Lamb\):)59.5 462.4 ms
(    b = 1)59.5 452.4 ms
(    mu = Lamb/h)59.5 442.4 ms
(    #generate array of intial values at t = 0)59.5 432.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 422.4 ms
(    #dimension of our matrix)59.5 412.4 ms
(    dim = len\(X\))59.5 402.4 ms
(    temp = [])59.5 392.4 ms
(    for dx in X: )59.5 382.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 372.4 ms
(        )59.5 362.4 ms
(    current_ = np.array\(temp\))59.5 352.4 ms
(    #Factored out -b*mu/2)59.5 342.4 ms
(    NEXT = np.array\([np.ones\(dim-1\),-2*\(1+1/\(b*mu\)\)*np.ones\(dim\),np.ones\(dim-1\)]\))59.5 332.4 ms
(    CURRENT = np.array\([-1*np.ones\(dim-1\),2*\(1-1/\(b*mu\)\)*np.ones\(dim\),-1*np.ones\(dim)59.5 322.4 ms
(-1\)]\))59.5 312.4 ms
(    )59.5 302.4 ms
(    offset = [-1,0,1]#Location of each diagonal)59.5 292.4 ms
(    LEFT = diags\(NEXT,offset\).toarray\(\)#Generate Matrix \(n+1\))59.5 282.4 ms
(    RIGHT = diags\(CURRENT,offset\).toarray\(\)#Generate Matrix \(n\) )59.5 272.4 ms
(    #Embed boundary conditions on matrix)59.5 262.4 ms
(    LEFT[0] *= 0)59.5 252.4 ms
(    LEFT[-1] *= 0)59.5 242.4 ms
(    LEFT[0][0] = 1)59.5 232.4 ms
(    LEFT[-1][-1] = 1)59.5 222.4 ms
(    RIGHT[0] *= 0)59.5 212.4 ms
(    RIGHT[-1] *= 0)59.5 202.4 ms
(    RIGHT[0][0] = 1)59.5 192.4 ms
(    RIGHT[-1][-1] = 1)59.5 182.4 ms
(    )59.5 162.4 ms
(    steps = int\(0.5/\(Lamb*h\)\) + 1)59.5 152.4 ms
(    for time in range\(1,steps\):)59.5 142.4 ms
(        t = time*Lamb*h)59.5 132.4 ms
(        )59.5 122.4 ms
(        sol_t = Exact\(t,X,15\))59.5 112.4 ms
(        #implement Scheme)59.5 102.4 ms
(        next_ = \\)59.5 92.4 ms
(   np.linalg.tensorsolve\(\(-b*mu/2\)*LEFT,\(-b*mu/2\)*np.matmul\(RIGHT,current_\)\))59.5 82.4 ms
(        )59.5 72.4 ms
(        #Boundary Conditions)59.5 62.4 ms
(        next_[-1] = Exact\(t,1,15\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 4)59.5 792.4 ms
F0 sf
(        next_[0]  = Exact\(t,-1,15\))59.5 772.4 ms
(        )59.5 762.4 ms
(        err = abs\(sol_t - next_\))59.5 752.4 ms
(        current_ = next_)59.5 742.4 ms
(        )59.5 732.4 ms
(        #plot )59.5 722.4 ms
(        title = "6.3.10: Parabolic Equations")59.5 712.4 ms
(        str_time = '0'*\(4-len\(str\(time\)\)\)+str\(time\))59.5 702.4 ms
(        outFile = "Figures\\err" + str_time)59.5 692.4 ms
(        bounds = [-1,1,0,1])59.5 682.4 ms
(        plot\(X,err,bounds,t,title,outFile\))59.5 672.4 ms
(        )59.5 662.4 ms
(    #makeGif)59.5 652.4 ms
(    makeGif\("ERROR_h_"+str\(h\)+"_Lambda_"+str\(Lamb\)\))59.5 642.4 ms
(    )59.5 632.4 ms
(def best_fit\(X, Y\):)59.5 622.4 ms
(    xbar = sum\(X\)/len\(X\))59.5 602.4 ms
(    ybar = sum\(Y\)/len\(Y\))59.5 592.4 ms
(    n = len\(X\) # or len\(Y\))59.5 582.4 ms
(    numer = sum\([xi*yi for xi,yi in zip\(X, Y\)]\) - n * xbar * ybar)59.5 562.4 ms
(    denum = sum\([xi**2 for xi in X]\) - n * xbar**2)59.5 552.4 ms
(    b = numer / denum)59.5 532.4 ms
(    a = ybar - b * xbar)59.5 522.4 ms
(    return a, b)59.5 502.4 ms
(def INFNORM_plot\(h,infNORM,LAMBDA\):)59.5 482.4 ms
(    sns.set\(font_scale = 2\))59.5 472.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 462.4 ms
(    fig,ax = plt.subplots\(\))59.5 452.4 ms
(    fig.set_size_inches\(14.4,9\))59.5 442.4 ms
(    plt.scatter\(h,infNORM,linewidth=3.0,color="r"\) )59.5 432.4 ms
(    plt.xlim\(1, 2\))59.5 422.4 ms
(    plt.xlabel\(r'$-Log_{10}$[dx]'\))59.5 412.4 ms
(    plt.ylabel\(r'$-Log_{10}$[INFINITY NORM]'\))59.5 402.4 ms
(    plt.title\("Lambda: "+str\(LAMBDA\)+" -- TIME: 0.5"\))59.5 392.4 ms
(    )59.5 382.4 ms
(    a, b = best_fit\(h, infNORM\))59.5 372.4 ms
(    yfit = [a + b * xi for xi in h])59.5 362.4 ms
(    plt.plot\(h, yfit,color="k",label="SLOPE: "+str\(round\(b,5\)\)\))59.5 352.4 ms
(    plt.legend\(\))59.5 342.4 ms
(     )59.5 332.4 ms
(    plt.savefig\("Figures/Err/INFNORMerr_LAMBDA_"+str\(LAMBDA\)+".png"\))59.5 322.4 ms
(    plt.close\(\))59.5 312.4 ms
(def L2NORM_plot\(h,L2norm,LAMBDA\):)59.5 292.4 ms
(    sns.set\(font_scale = 2\))59.5 282.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 272.4 ms
(    fig,ax = plt.subplots\(\))59.5 262.4 ms
(    fig.set_size_inches\(14.4,9\))59.5 252.4 ms
(    plt.scatter\(h,L2norm,linewidth=3.0,color="r"\)  )59.5 242.4 ms
(    plt.xlim\(1, 2\))59.5 232.4 ms
(    plt.xlabel\(r'$-Log_{10}$[dx]'\))59.5 222.4 ms
(    plt.ylabel\(r'$-Log_{10}$[L2 NORM]'\))59.5 212.4 ms
(    plt.title\("Lambda: "+str\(LAMBDA\)+" -- TIME: 0.5"\))59.5 202.4 ms
(    )59.5 192.4 ms
(    a, b = best_fit\(h, L2norm\))59.5 182.4 ms
(    yfit = [a + b * xi for xi in h])59.5 172.4 ms
(    plt.plot\(h, yfit,color="k",label="SLOPE: "+str\(round\(b,5\)\)\))59.5 162.4 ms
(    plt.legend\(\))59.5 152.4 ms
(    )59.5 142.4 ms
(    plt.savefig\("Figures/Err/L2NORMerr_LAMBDA_"+str\(LAMBDA\)+".png"\))59.5 132.4 ms
(    plt.close\(\))59.5 122.4 ms
(    )59.5 112.4 ms
(def ErrNorms\(h,Lamb\):)59.5 102.4 ms
(    b = 1)59.5 92.4 ms
(    mu = Lamb/h)59.5 82.4 ms
(    #generate array of intial values at t = 0)59.5 72.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 62.4 ms
(    #dimension of our matrix)59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 5)59.5 792.4 ms
F0 sf
(    dim = len\(X\))59.5 772.4 ms
(    temp = [])59.5 762.4 ms
(    for dx in X: )59.5 752.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 742.4 ms
(        )59.5 732.4 ms
(    current_ = np.array\(temp\))59.5 722.4 ms
(    #Factored out -b*mu/2)59.5 712.4 ms
(    NEXT = np.array\([np.ones\(dim-1\),-2*\(1+1/\(b*mu\)\)*np.ones\(dim\),np.ones\(dim-1\)]\))59.5 702.4 ms
(    CURRENT = np.array\([-1*np.ones\(dim-1\),2*\(1-1/\(b*mu\)\)*np.ones\(dim\),-1*np.ones\(dim)59.5 692.4 ms
(-1\)]\))59.5 682.4 ms
(    )59.5 672.4 ms
(    offset = [-1,0,1]#Location of each diagonal)59.5 662.4 ms
(    LEFT = diags\(NEXT,offset\).toarray\(\)#Generate Matrix \(n+1\))59.5 652.4 ms
(    RIGHT = diags\(CURRENT,offset\).toarray\(\)#Generate Matrix \(n\) )59.5 642.4 ms
(    #Embed boundary conditions on matrix)59.5 632.4 ms
(    LEFT[0] *= 0)59.5 622.4 ms
(    LEFT[-1] *= 0)59.5 612.4 ms
(    LEFT[0][0] = 1)59.5 602.4 ms
(    LEFT[-1][-1] = 1)59.5 592.4 ms
(    RIGHT[0] *= 0)59.5 582.4 ms
(    RIGHT[-1] *= 0)59.5 572.4 ms
(    RIGHT[0][0] = 1)59.5 562.4 ms
(    RIGHT[-1][-1] = 1)59.5 552.4 ms
(    steps = int\(0.5/\(Lamb*h\)\) + 1)59.5 532.4 ms
(    L2_last = [])59.5 522.4 ms
(    infNORM = [])59.5 512.4 ms
(    for time in range\(1,steps\):)59.5 502.4 ms
(        t = time*Lamb*h)59.5 492.4 ms
(        )59.5 482.4 ms
(        sol_t = Exact\(t,X,15\))59.5 472.4 ms
(        #implement Scheme)59.5 462.4 ms
(        next_ = \\)59.5 452.4 ms
(   np.linalg.tensorsolve\(\(-b*mu/2\)*LEFT,\(-b*mu/2\)*np.matmul\(RIGHT,current_\)\))59.5 442.4 ms
(        )59.5 432.4 ms
(        #Boundary Conditions)59.5 422.4 ms
(        next_[-1] = Exact\(t,1,15\))59.5 412.4 ms
(        next_[0]  = Exact\(t,-1,15\))59.5 402.4 ms
(        )59.5 392.4 ms
(        err = sol_t - next_)59.5 382.4 ms
(        infNORM.append\(-1*np.log10\(max\(abs\(err\)\)\)\))59.5 372.4 ms
(        L2_last.append\(-1*np.log10\(np.sqrt\(sum\(err*err\)\)\)\))59.5 362.4 ms
(        current_ = next_)59.5 352.4 ms
(    return infNORM[-1],L2_last[-1])59.5 332.4 ms
(if __name__ == "__main__":)59.5 302.4 ms
(    mu = 10)59.5 292.4 ms
(    infi = [])59.5 282.4 ms
(    L2_data= [])59.5 272.4 ms
(    h = [])59.5 262.4 ms
(    for i in range\(10,110,10\):)59.5 252.4 ms
(        print\(i\))59.5 242.4 ms
(        inf,L2 = ErrNorms\(1.0/i,1.0/50\))59.5 232.4 ms
(        infi.append\(inf\))59.5 222.4 ms
(        L2_data.append\(L2\))59.5 212.4 ms
(        h.append\(-1*np.log10\(1.0/i\)\))59.5 202.4 ms
(      )59.5 192.4 ms
(    INFNORM_plot\(h,infi,1.0/50\))59.5 182.4 ms
(    L2NORM_plot\(h,L2_data,1.0/50\))59.5 172.4 ms
(    dx = [1/10,1/20,1/40])59.5 152.4 ms
(    LAMBDA = 1.0)59.5 142.4 ms
(    mu = 10)59.5 132.4 ms
(    for h in dx:)59.5 122.4 ms
(        Crank_Nicolson\(h,LAMBDA\))59.5 112.4 ms
(        ExactGIF\(h,LAMBDA\))59.5 102.4 ms
(        ErrorGIF\(h,LAMBDA\))59.5 92.4 ms
(        )59.5 82.4 ms
(        if h != 1/10:)59.5 72.4 ms
(            Crank_Nicolson\(h,mu*h\))59.5 62.4 ms
(            ExactGIF\(h,mu*h\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 6 6
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(HW3.py                                                                        Page 6)59.5 792.4 ms
F0 sf
(            ErrorGIF\(h,mu*h\))59.5 772.4 ms
(''')59.5 752.4 ms
(Report. )59.5 742.4 ms
(We see that the inf norm of the error decreases faster than the )59.5 722.4 ms
(L2 Norm of the error. From the figure plots. )59.5 712.4 ms
(''')59.5 702.4 ms
(            )59.5 682.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 6
%%EOF
