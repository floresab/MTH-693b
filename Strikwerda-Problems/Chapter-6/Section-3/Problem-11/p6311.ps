%!PS-Adobe-3.0
%%Title: p6311.py
%%For: flore
%%Creator: VIM - Vi IMproved 7.3 (2010 Aug 15)
%%CreationDate: Fri Mar 30 17:08:57 2018
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim73/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim73/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 1)59.5 792.4 ms
F0 sf
(""")59.5 772.4 ms
(Author   : Abraham Flores)59.5 762.4 ms
(File     : p6311.py)59.5 752.4 ms
(Language : Python 3.6)59.5 742.4 ms
(Created  : 3/20/2018)59.5 732.4 ms
(Edited   : 3/21/2018)59.5 722.4 ms
(San Digeo State University )59.5 702.4 ms
(MTH 693b : Computational Partial Differential Equations)59.5 692.4 ms
(Strikwerda 6.3.11 : Parabolic Equations)59.5 672.4 ms
(Heat Equation: )59.5 652.4 ms
(    u_t = b*u_xx)59.5 642.4 ms
(    )59.5 632.4 ms
(    x = [-1,1])59.5 622.4 ms
(    t = [0,1/2])59.5 612.4 ms
(             )59.5 602.4 ms
(             |   1 - |x|  for |x| < 1/2)59.5 592.4 ms
(    u_0\(x\) = |    1/4     for |x| = 1/2)59.5 582.4 ms
(             |     0      for |x| > 1/2)59.5 572.4 ms
(             )59.5 562.4 ms
(    Exact Solution: )59.5 552.4 ms
(        )59.5 542.4 ms
(        u\(t,x\) = )59.5 532.4 ms
(3/8 +)59.5 522.4 ms
(SUM[\(cos\(2pi*x*\(2*i+1\)\)\)/\(pi**2*\(2*i+1\)**2\)*exp\(-4t*pi**2\(2*i+1\)**2\)])59.5 512.4 ms
(\(i=0,inf\))59.5 502.4 ms
(+)59.5 492.4 ms
(SUM[\(\(-1\)**j/\(pi*\(2j+1\)\)+\(2\)/\(pi**2*\(2j+1\)**2\)\)*cos\(pi*x*\(2*j+1\)\)*exp\(-t*pi**2*\(2*j+)59.5 482.4 ms
(1\)**2\)])59.5 472.4 ms
(\(j=0,inf\))59.5 462.4 ms
(    h = 1/10, 1/20, 1/40, 1/80)59.5 442.4 ms
(    )59.5 432.4 ms
(    a\) Foward-Time Central-Space : mu = .4)59.5 422.4 ms
(    b\) Crank-Nicolson\(6.3.4\)     : lambda = 1 / mu = 1/h)59.5 412.4 ms
(    c\) Crank-Nicolson\(6.3.4\)     : mu = 5)59.5 402.4 ms
(    )59.5 392.4 ms
(    Boundaries: )59.5 382.4 ms
(        u\(t,-1\) = Exact)59.5 372.4 ms
(        u_x\(t,1\) = 0)59.5 362.4 ms
(        V\(n,M+1\) = V\(n,M-1\))59.5 352.4 ms
(""")59.5 332.4 ms
(import os,glob)59.5 322.4 ms
(import matplotlib.pyplot as plt)59.5 312.4 ms
(import numpy as np)59.5 302.4 ms
(import seaborn as sns)59.5 292.4 ms
(from scipy.sparse import diags)59.5 282.4 ms
(#Generators Exact Solution)59.5 262.4 ms
(def Exact\(t,x,lim\):)59.5 252.4 ms
(    sum1 = 0)59.5 242.4 ms
(    sum2 = 0)59.5 232.4 ms
(    for i in range\(lim\):)59.5 222.4 ms
(        #First Sum)59.5 212.4 ms
(        #################################)59.5 202.4 ms
(        numerator = np.cos\(2*np.pi*x*\(2*i+1\)\))59.5 192.4 ms
(        denominator = np.pi**2*\(2*i+1\)**2)59.5 182.4 ms
(        decay = np.exp\(-4*t*np.pi**2*\(2*i+1\)**2\))59.5 172.4 ms
(        sum1 += numerator/denominator*decay)59.5 162.4 ms
(        #################################)59.5 152.4 ms
(        #Second Sum)59.5 142.4 ms
(        #################################)59.5 132.4 ms
(        term1 = \(-1\)**i/\(np.pi*\(2*i+1\)\))59.5 122.4 ms
(        term2 = 2.0/\(np.pi**2*\(2*i+1\)**2\))59.5 112.4 ms
(        osc_decay = np.cos\(np.pi*x*\(2*i+1\)\)*np.exp\(-t*np.pi**2*\(2*i+1\)**2\))59.5 102.4 ms
(        sum2 += \(term1 + term2\)*osc_decay)59.5 92.4 ms
(        #################################)59.5 82.4 ms
(    return 3.0/8 + sum1 + sum2)59.5 72.4 ms
(#Generates intial value function)59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 2)59.5 792.4 ms
F0 sf
(def intial_foo\(x\):)59.5 772.4 ms
(    if abs\(x\) < 0.5:)59.5 762.4 ms
(        return 1 - abs\(x\))59.5 752.4 ms
(    if abs\(x\) == 0.5:)59.5 742.4 ms
(        return 0.25)59.5 732.4 ms
(    if abs\(x\) > 0.5:)59.5 722.4 ms
(        return 0)59.5 712.4 ms
(#Plot )59.5 702.4 ms
(def plot\(x,U,bounds,time,title,fileLoc\):)59.5 692.4 ms
(    sns.set\(font_scale = 2\))59.5 682.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 672.4 ms
(    fig,ax = plt.subplots\(\))59.5 662.4 ms
(    fig.set_size_inches\(8,8\))59.5 652.4 ms
(    plt.plot\(x,U,linewidth=3.0,label="t = "+ str\(round\(time,3\)\),color="r"\))59.5 642.4 ms
(    plt.axis\(bounds\)    )59.5 632.4 ms
(    plt.xlabel\('x \(Spatial\)'\))59.5 622.4 ms
(    plt.ylabel\('U\(t,x\)'\))59.5 612.4 ms
(    plt.title\(title\))59.5 602.4 ms
(    plt.legend\(\))59.5 582.4 ms
(    plt.savefig\(fileLoc+".png"\))59.5 572.4 ms
(    plt.close\(\))59.5 562.4 ms
(def plot_error\(x,U,labels,bounds,time,title,fileLoc\):)59.5 542.4 ms
(    sns.set\(font_scale = 2\))59.5 532.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 522.4 ms
(    fig,ax = plt.subplots\(\))59.5 512.4 ms
(    fig.set_size_inches\(8,8\))59.5 502.4 ms
(    colors = ["r","b","c"])59.5 492.4 ms
(    for i in range\(len\(U\)\):)59.5 482.4 ms
(        plt.plot\(x,U[i],linewidth=3.0,label=labels[i],color=colors[i]\))59.5 472.4 ms
(    x_c = bounds[0] + \(bounds[1]-bounds[0]\)/35)59.5 462.4 ms
(    y_c = bounds[-1] - \(bounds[-1]-bounds[-2]\)/10)59.5 452.4 ms
(    ax.annotate\("t = "+ str\(round\(time,3\)\),xy=\(0,0\) ,xytext=\(x_c,y_c\)\))59.5 442.4 ms
(    plt.axis\(bounds\)    )59.5 432.4 ms
(    plt.xlabel\('x \(Spatial\)'\))59.5 422.4 ms
(    plt.ylabel\('U\(t,x\) or |Error|'\))59.5 412.4 ms
(    plt.title\(title\))59.5 402.4 ms
(    plt.legend\(\))59.5 382.4 ms
(    plt.savefig\(fileLoc+".png"\))59.5 372.4 ms
(    plt.close\(\))59.5 362.4 ms
(    )59.5 352.4 ms
(""")59.5 342.4 ms
(Makes a gif given a name and delay for each image in ms)59.5 332.4 ms
(--Assumes the images are in the figures directory)59.5 312.4 ms
(""")59.5 302.4 ms
(def makeGif\(gifName,delay\):)59.5 292.4 ms
(    os.chdir\('Figures'\))59.5 282.4 ms
(    #Create txt file for gif command)59.5 272.4 ms
(    fileList = glob.glob\('*.png'\) #star grabs everything,)59.5 262.4 ms
(    fileList.sort\(\))59.5 252.4 ms
(    #writes txt file)59.5 242.4 ms
(    file = open\('FileList.txt', 'w'\))59.5 232.4 ms
(    for item in fileList:)59.5 222.4 ms
(        file.write\("%s\\n" % item\))59.5 212.4 ms
(    file.close\(\))59.5 202.4 ms
(    os.system\('convert -delay ' + str\(delay\) + ' @FileList.txt ' + gifName + '.gif'\))59.5 182.4 ms
(    os.system\('del FileList.txt'\))59.5 172.4 ms
(    os.system\('del *.png'\))59.5 162.4 ms
(    os.chdir\('..'\))59.5 152.4 ms
(""")59.5 132.4 ms
(Computes intercept and slope for an unweighted linear best fit)59.5 122.4 ms
(""")59.5 112.4 ms
(def best_fit\(X, Y\):)59.5 102.4 ms
(    xbar = sum\(X\)/len\(X\))59.5 82.4 ms
(    ybar = sum\(Y\)/len\(Y\))59.5 72.4 ms
(    n = len\(X\) # or len\(Y\))59.5 62.4 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 3)59.5 792.4 ms
F0 sf
(    numer = sum\([xi*yi for xi,yi in zip\(X, Y\)]\) - n * xbar * ybar)59.5 772.4 ms
(    denum = sum\([xi**2 for xi in X]\) - n * xbar**2)59.5 762.4 ms
(    b = numer / denum)59.5 742.4 ms
(    a = ybar - b * xbar)59.5 732.4 ms
(    return a, b)59.5 712.4 ms
(def plot_norm\(scheme,h,mu,inf_norm,L2_norm\):)59.5 692.4 ms
(    sns.set\(font_scale = 2\))59.5 682.4 ms
(    sns.set_style\("darkgrid", {"axes.facecolor": ".9"}\))59.5 672.4 ms
(    fig,ax = plt.subplots\(\))59.5 662.4 ms
(    fig.set_size_inches\(14.4,9\))59.5 652.4 ms
(    plt.scatter\(h,inf_norm,linewidth=3.0,color="r",label=r'$-Log_{10}$[INFINITY NORM)59.5 642.4 ms
(]'\) )59.5 632.4 ms
(    plt.scatter\(h,L2_norm,linewidth=3.0,color="b",label=r'$-Log_{10}$[L2 NORM]'\) )59.5 622.4 ms
(    #plt.xlim\(1, 2\))59.5 612.4 ms
(    plt.xlabel\(r'$-Log_{10}$[dx]'\))59.5 602.4 ms
(    plt.ylabel\(r'$-Log_{10}$|ERROR|'\))59.5 592.4 ms
(    plt.title\(scheme +" mu: "+str\(mu\)+" -- TIME: 0.5"\))59.5 582.4 ms
(    )59.5 572.4 ms
(    a_inf, b_inf = best_fit\(h, inf_norm\))59.5 562.4 ms
(    yfit = [a_inf + b_inf * xi for xi in h])59.5 552.4 ms
(    plt.plot\(h, yfit,color="k",label="\(INF\) SLOPE: "+str\(round\(b_inf,5\)\)\))59.5 542.4 ms
(    )59.5 532.4 ms
(    a_L2, b_L2 = best_fit\(h, L2_norm\))59.5 522.4 ms
(    yfit = [a_L2 + b_L2 * xi for xi in h])59.5 512.4 ms
(    plt.plot\(h, yfit,color="k",label="\(L2\)  SLOPE: "+str\(round\(b_L2,5\)\)\))59.5 502.4 ms
(    plt.legend\(\))59.5 492.4 ms
(     )59.5 482.4 ms
(    plt.savefig\("Figures/Error/"+scheme+"_norm_err_mu_"+str\(mu\)+".png"\))59.5 472.4 ms
(    plt.close\(\))59.5 462.4 ms
(""")59.5 442.4 ms
(Uses the Crank-Nicolson scheme to solve the given parabolic equation)59.5 432.4 ms
(""")59.5 422.4 ms
(def Crank_Nicolson\(h,mu\):)59.5 412.4 ms
(    b = 1)59.5 402.4 ms
(    k = b*mu)59.5 392.4 ms
(    )59.5 382.4 ms
(    #generate array of intial values at t = 0)59.5 372.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 362.4 ms
(    #dimension of our matrix)59.5 352.4 ms
(    dim = len\(X\))59.5 342.4 ms
(    temp = [])59.5 332.4 ms
(    for dx in X: )59.5 322.4 ms
(        temp.append\(intial_foo\(dx\)\)    )59.5 312.4 ms
(    #intialize array v{n,m})59.5 302.4 ms
(    next_ = np.array\(temp\))59.5 292.4 ms
(    )59.5 282.4 ms
(    #Generate Left and right matrices)59.5 272.4 ms
(    NEXT = np.array\([\(-k/2\)*np.ones\(dim-1\),\(1+k\)*np.ones\(dim\),\(-k/2\)*np.ones\(dim-1\)])59.5 262.4 ms
(\))59.5 252.4 ms
(    CURRENT = np.array\([\(k/2\)*np.ones\(dim-1\),\(1-k\)*np.ones\(dim\),\(k/2\)*np.ones\(dim-1\))59.5 242.4 ms
(]\))59.5 232.4 ms
(    )59.5 222.4 ms
(    offset = [-1,0,1]#Location of each diagonal)59.5 212.4 ms
(    LEFT = diags\(NEXT,offset\).toarray\(\)#Generate Matrix \(n+1\))59.5 202.4 ms
(    RIGHT = diags\(CURRENT,offset\).toarray\(\)#Generate Matrix \(n\) )59.5 192.4 ms
(    )59.5 182.4 ms
(    #Embed boundary conditions on matrix)59.5 172.4 ms
(    LEFT[0] *= 0)59.5 162.4 ms
(    LEFT[-1] *= 0)59.5 152.4 ms
(    LEFT[0][0] = 1)59.5 142.4 ms
(    LEFT[-1][-1] = 1 + k)59.5 132.4 ms
(    LEFT[-1][-2] = -k)59.5 122.4 ms
(    RIGHT[0] *= 0)59.5 112.4 ms
(    RIGHT[-1] *= 0)59.5 102.4 ms
(    RIGHT[0][0] = 1)59.5 92.4 ms
(    RIGHT[-1][-1] = 1 - k)59.5 82.4 ms
(    RIGHT[-1][-2] = k)59.5 72.4 ms
(    title = "6.3.11: Crank-Nicolson: h: " +str\(round\(h,4\)\) + ", mu: " +str\(mu\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 4)59.5 792.4 ms
F0 sf
(    bounds = [-1,1,0,1])59.5 772.4 ms
(    #plot )59.5 762.4 ms
(    outFile = "Figures\\CN00000")59.5 752.4 ms
(    plot\(X,next_,bounds,0,title,outFile\))59.5 742.4 ms
(    )59.5 732.4 ms
(    steps = int\(0.5/\(mu*h**2\)\) + 2)59.5 722.4 ms
(    for t in range\(1,steps\):)59.5 712.4 ms
(        time = t*mu*h**2)59.5 702.4 ms
(        )59.5 692.4 ms
(        #implement Scheme)59.5 682.4 ms
(        next_ = np.linalg.tensorsolve\(LEFT,np.matmul\(RIGHT,next_\)\))59.5 672.4 ms
(        #Boundary Conditions)59.5 652.4 ms
(        next_[0]  = Exact\(time,-1,15\))59.5 642.4 ms
(        )59.5 632.4 ms
(        #plot )59.5 622.4 ms
(        str_time = '0'*\(5-len\(str\(t\)\)\)+str\(t\))59.5 612.4 ms
(        outFile = "Figures\\CN" + str_time)59.5 602.4 ms
(        plot\(X,next_,bounds,time,title,outFile\))59.5 592.4 ms
(        )59.5 582.4 ms
(    #makeGif)59.5 572.4 ms
(    makeGif\("Crank_Nicolson_h_"+str\(h\)+"_mu_"+str\(mu\),10\))59.5 562.4 ms
(    )59.5 552.4 ms
(def FTCS\(h,mu\):)59.5 542.4 ms
(    b = 1)59.5 532.4 ms
(    k = b*mu)59.5 522.4 ms
(    #generate array of intial values at t = 0)59.5 512.4 ms
(    X = np.arange\(-1,1+h,h\))59.5 502.4 ms
(    temp = [])59.5 492.4 ms
(    for dx in X: )59.5 482.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 472.4 ms
(        )59.5 462.4 ms
(    next_ = np.array\(temp\))59.5 452.4 ms
(    )59.5 442.4 ms
(    title = "6.3.11: FTCS mu: " +str\(round\(mu,3\)\))59.5 432.4 ms
(    bounds = [-1,1,0,1])59.5 422.4 ms
(    outFile = "Figures\\FTCS00000")59.5 412.4 ms
(    plot\(X,next_,bounds,0,title,outFile\))59.5 402.4 ms
(    )59.5 392.4 ms
(    steps = int\(0.5/\(mu*h**2\)\) + 2)59.5 382.4 ms
(    for t in range\(1,steps\):)59.5 372.4 ms
(        time = t*mu*h**2)59.5 362.4 ms
(        )59.5 352.4 ms
(        #implement Scheme)59.5 342.4 ms
(        prev_ = next_)59.5 332.4 ms
(        #np.roll: postive shift => terms to the left, negative => terms to the right)59.5 322.4 ms
( )59.5 312.4 ms
(        next_ = k*\(np.roll\(next_,1\)+np.roll\(next_,-1\)\) + \(1-2*k\)*next_)59.5 302.4 ms
(        #Boundary Conditions)59.5 292.4 ms
(        next_[-1] = 2*k*prev_[-2] + \(1-2*k\)*prev_[-1])59.5 282.4 ms
(        next_[0]  = Exact\(time,-1,15\))59.5 272.4 ms
(        )59.5 262.4 ms
(        #plot )59.5 252.4 ms
(        str_time = '0'*\(5-len\(str\(t\)\)\)+str\(t\))59.5 242.4 ms
(        outFile = "Figures\\FTCS" + str_time)59.5 232.4 ms
(        plot\(X,next_,bounds,time,title,outFile\))59.5 222.4 ms
(        )59.5 212.4 ms
(    #makeGif)59.5 202.4 ms
(    makeGif\("FTCS_h_"+str\(h\)+"_mu_"+str\(mu\),10\))59.5 192.4 ms
(        )59.5 182.4 ms
(def ExactGIF\(h,Lamb\):)59.5 172.4 ms
(    #generate array of intial values at t = 0)59.5 162.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 152.4 ms
(    )59.5 142.4 ms
(    temp = [])59.5 132.4 ms
(    for dx in X: )59.5 122.4 ms
(        temp.append\(intial_foo\(dx\)\))59.5 112.4 ms
(    #plot )59.5 102.4 ms
(    title = "6.3.11: Exact Solution")59.5 92.4 ms
(    str_time = '00000')59.5 82.4 ms
(    outFile = "Figures\\exact" + str_time)59.5 72.4 ms
(    bounds = [-1,1,0,1])59.5 62.4 ms
(    plot\(X,np.asarray\(temp\),bounds,0,title,outFile\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 5)59.5 792.4 ms
F0 sf
(        )59.5 772.4 ms
(    steps = int\(0.5/\(Lamb*h\)\) + 2)59.5 762.4 ms
(    for t in range\(1,steps\):)59.5 752.4 ms
(        time = t*Lamb*h)59.5 742.4 ms
(        sol_t = Exact\(time,X,25\))59.5 732.4 ms
(        )59.5 722.4 ms
(        #plot )59.5 712.4 ms
(        str_time = '0'*\(5-len\(str\(time\)\)\)+str\(time\))59.5 702.4 ms
(        outFile = "Figures\\exact" + str_time)59.5 692.4 ms
(        plot\(X,sol_t,bounds,t,title,outFile\))59.5 682.4 ms
(        )59.5 672.4 ms
(    #makeGif)59.5 662.4 ms
(    makeGif\("Exact_Solution_h_"+str\(h\)+"_Lambda_"+str\(Lamb\),10\))59.5 652.4 ms
(    )59.5 642.4 ms
(def CN_error\(h,mu,gif,n_img\):)59.5 632.4 ms
(    b = 1)59.5 622.4 ms
(    #generate array of intial values at t = 0)59.5 612.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 602.4 ms
(    #dimension of our matrix)59.5 592.4 ms
(    dim = len\(X\))59.5 582.4 ms
(    temp = [])59.5 572.4 ms
(    for dx in X: )59.5 562.4 ms
(        temp.append\(intial_foo\(dx\)\)    )59.5 552.4 ms
(    next_ = np.array\(temp\))59.5 542.4 ms
(    )59.5 532.4 ms
(    k = b*mu)59.5 522.4 ms
(    NEXT = np.array\([\(-k/2\)*np.ones\(dim-1\),\(1+k\)*np.ones\(dim\),\(-k/2\)*np.ones\(dim-1\)])59.5 512.4 ms
(\))59.5 502.4 ms
(    CURRENT = np.array\([\(k/2\)*np.ones\(dim-1\),\(1-k\)*np.ones\(dim\),\(k/2\)*np.ones\(dim-1\))59.5 492.4 ms
(]\))59.5 482.4 ms
(    )59.5 472.4 ms
(    offset = [-1,0,1]#Location of each diagonal)59.5 462.4 ms
(    LEFT = diags\(NEXT,offset\).toarray\(\)#Generate Matrix \(n+1\))59.5 452.4 ms
(    RIGHT = diags\(CURRENT,offset\).toarray\(\)#Generate Matrix \(n\) )59.5 442.4 ms
(    #Embed boundary conditions on matrix)59.5 432.4 ms
(    LEFT[0] *= 0)59.5 422.4 ms
(    LEFT[-1] *= 0)59.5 412.4 ms
(    LEFT[0][0] = 1)59.5 402.4 ms
(    LEFT[-1][-1] = 1 + k)59.5 392.4 ms
(    LEFT[-1][-2] = -k)59.5 382.4 ms
(    RIGHT[0] *= 0)59.5 372.4 ms
(    RIGHT[-1] *= 0)59.5 362.4 ms
(    RIGHT[0][0] = 1)59.5 352.4 ms
(    RIGHT[-1][-1] = 1 - k)59.5 342.4 ms
(    RIGHT[-1][-2] = k)59.5 332.4 ms
(    if gif:)59.5 312.4 ms
(        title = "6.3.11: Crank-Nicolson: h: " +str\(round\(h,4\)\) + ", mu: " +str\(mu\))59.5 302.4 ms
(        bounds = [-1,1,0,1])59.5 292.4 ms
(    )59.5 282.4 ms
(    inf_norm = [])59.5 272.4 ms
(    L2_norm = [])59.5 262.4 ms
(    steps = int\(0.5/\(mu*h**2\)\) + 2)59.5 252.4 ms
(    for t in range\(1,steps\):)59.5 242.4 ms
(        time = t*mu*h**2)59.5 232.4 ms
(        sol_t = Exact\(time,X,15\))59.5 222.4 ms
(        #implement Scheme)59.5 212.4 ms
(        next_ = np.linalg.tensorsolve\(LEFT,np.matmul\(RIGHT,next_\)\))59.5 202.4 ms
(        #Boundary Conditions)59.5 182.4 ms
(        next_[0]  = Exact\(time,-1,15\))59.5 172.4 ms
(        )59.5 162.4 ms
(        err = abs\(sol_t - next_\))59.5 152.4 ms
(        inf_norm.append\(-1*np.log10\(max\(err\)\)\))59.5 142.4 ms
(        L2_norm.append\(-1*np.log10\(np.sqrt\(sum\(err*err\)\)\)\))59.5 132.4 ms
(        )59.5 122.4 ms
(        #plot )59.5 112.4 ms
(        if gif and \(t%n_img==0\):)59.5 102.4 ms
(            str_time = '0'*\(5-len\(str\(t\)\)\)+str\(t\))59.5 92.4 ms
(            outFile = "Figures\\CN_err" + str_time)59.5 82.4 ms
(            plot_error\\)59.5 72.4 ms
(    \(X,[sol_t,next_,err],["Exact","CN","|Error|"],bounds,time,title,outFile\))59.5 62.4 ms
(    )59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 6 6
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 6)59.5 792.4 ms
F0 sf
(    if gif:)59.5 772.4 ms
(        #makeGif)59.5 762.4 ms
(        makeGif\("CN_ERROR_h_"+str\(h\)+"_mu_"+str\(mu\),10\))59.5 752.4 ms
(    )59.5 742.4 ms
(    return inf_norm[-1],L2_norm[-1])59.5 732.4 ms
(     )59.5 722.4 ms
(def FTCS_error\(h,mu,gif,n_img\):)59.5 712.4 ms
(    b = 1)59.5 702.4 ms
(    k = b*mu)59.5 692.4 ms
(    #generate array of intial values at t = 0)59.5 682.4 ms
(    X = np.arange\(0-1,1+h,h\))59.5 672.4 ms
(    #dimension of our matrix)59.5 662.4 ms
(    temp = [])59.5 642.4 ms
(    for dx in X: )59.5 632.4 ms
(        temp.append\(intial_foo\(dx\)\)    )59.5 622.4 ms
(    next_ = np.array\(temp\))59.5 612.4 ms
(    )59.5 602.4 ms
(    )59.5 592.4 ms
(    if gif:)59.5 582.4 ms
(        title = "6.3.11: FTCS: h: " +str\(round\(h,4\)\) + " mu: " +str\(mu\))59.5 572.4 ms
(        bounds = [-1,1,0,1])59.5 562.4 ms
(    )59.5 552.4 ms
(    inf_norm = [])59.5 542.4 ms
(    L2_norm = [])59.5 532.4 ms
(    steps = int\(0.5/\(mu*h**2\)\) + 2)59.5 522.4 ms
(    for t in range\(1,steps\):)59.5 512.4 ms
(        time = t*mu*h**2)59.5 502.4 ms
(        sol_t = Exact\(time,X,15\))59.5 492.4 ms
(        #implement Scheme)59.5 482.4 ms
(        prev_ = next_)59.5 472.4 ms
(        #np.roll: postive shift => terms to the left, negative => terms to the right)59.5 462.4 ms
( )59.5 452.4 ms
(        next_ = k*\(np.roll\(next_,1\)+np.roll\(next_,-1\)\) + \(1-2*k\)*next_)59.5 442.4 ms
(        #Boundary Conditions)59.5 432.4 ms
(        next_[-1] = 2*k*prev_[-2] + \(1-2*k\)*prev_[-1])59.5 422.4 ms
(        next_[0]  = Exact\(time,-1,15\))59.5 412.4 ms
(        )59.5 402.4 ms
(        err = abs\(sol_t - next_\))59.5 392.4 ms
(        inf_norm.append\(-1*np.log10\(max\(err\)\)\))59.5 382.4 ms
(        L2_norm.append\(-1*np.log10\(np.sqrt\(sum\(err*err\)\)\)\))59.5 372.4 ms
(        )59.5 362.4 ms
(        #plot )59.5 352.4 ms
(        if gif and \(t%n_img==0\):)59.5 342.4 ms
(            str_time = '0'*\(5-len\(str\(t\)\)\)+str\(t\))59.5 332.4 ms
(            outFile = "Figures\\FTCS_err" + str_time)59.5 322.4 ms
(            plot_error\\)59.5 312.4 ms
(    \(X,[sol_t,next_,err],["Exact","FTCS","|Error|"],bounds,time,title,outFile\))59.5 302.4 ms
(    )59.5 292.4 ms
(    if gif:)59.5 282.4 ms
(        #makeGif)59.5 272.4 ms
(        makeGif\("FTCS_ERROR_h_"+str\(h\)+"_mu_"+str\(mu\),10\))59.5 262.4 ms
(    )59.5 252.4 ms
(    return inf_norm[-1],L2_norm[-1])59.5 242.4 ms
(    )59.5 232.4 ms
(if __name__ == "__main__": )59.5 222.4 ms
(    inf_all = [])59.5 212.4 ms
(    L2_all = [])59.5 202.4 ms
(    h = [])59.5 192.4 ms
(    for i in range\(10,110,10\):)59.5 182.4 ms
(        inf,L2 = FTCS_error\(1.0/i,0.4,False\))59.5 172.4 ms
(        inf_all.append\(inf\))59.5 162.4 ms
(        L2_all.append\(L2\))59.5 152.4 ms
(        h.append\(-1*np.log10\(1.0/i\)\))59.5 142.4 ms
(    )59.5 132.4 ms
(    plot_norm\("FTCS",h,0.4,inf_all,L2_all\))59.5 122.4 ms
(    inf_all = [])59.5 102.4 ms
(    L2_all = [])59.5 92.4 ms
(    h = [])59.5 82.4 ms
(    for i in range\(10,110,10\):)59.5 72.4 ms
(        inf,L2 = CN_error\(1.0/i,5,False\))59.5 62.4 ms
(        inf_all.append\(inf\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 7 7
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(p6311.py                                                                      Page 7)59.5 792.4 ms
F0 sf
(        L2_all.append\(L2\))59.5 772.4 ms
(        h.append\(-1*np.log10\(1.0/i\)\))59.5 762.4 ms
(    )59.5 752.4 ms
(    plot_norm\("Crank-Nicolson",h,5,inf_all,L2_all\))59.5 742.4 ms
(    )59.5 732.4 ms
(    inf_all = [])59.5 722.4 ms
(    L2_all = [])59.5 712.4 ms
(    h = [])59.5 702.4 ms
(    for i in range\(10,110,10\):)59.5 692.4 ms
(        inf,L2 = CN_error\(1.0/i,i,False\))59.5 682.4 ms
(        inf_all.append\(inf\))59.5 672.4 ms
(        L2_all.append\(L2\))59.5 662.4 ms
(        h.append\(-1*np.log10\(1.0/i\)\))59.5 652.4 ms
(        )59.5 642.4 ms
(    plot_norm\("Crank-Nicolson",h,r"$h^{-1}$",inf_all,L2_all\))59.5 632.4 ms
(    #The plots are moved to error directory so they do not get deleted)59.5 622.4 ms
(    dx = [1/10,1/20])59.5 612.4 ms
(    for h in dx:)59.5 592.4 ms
(        CN_error\(h,5,True,1\))59.5 582.4 ms
(        CN_error\(h,1/h,True,1\))59.5 572.4 ms
(        FTCS_error\(h,0.4,True,1\))59.5 562.4 ms
(    )59.5 552.4 ms
(    dx = [1/40,1/80])59.5 542.4 ms
(    for h in dx:)59.5 522.4 ms
(        CN_error\(h,5,True,\(1/\(8*h\)\)\))59.5 512.4 ms
(        CN_error\(h,1/h,True,1\))59.5 502.4 ms
(        FTCS_error\(h,0.4,True,\(1/\(8*h\)\)\))59.5 492.4 ms
(''')59.5 472.4 ms
(Report. )59.5 462.4 ms
(The accuracy of both schemes are reasonably accurate, however the FTCS scheme)59.5 442.4 ms
(is extremly fast due being explicit and without matrix multiplication. )59.5 432.4 ms
(Although it is essentialy matrix multiplication.)59.5 422.4 ms
(''')59.5 412.4 ms
(            )59.5 392.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 7
%%EOF
